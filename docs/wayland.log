[wqy@archlinux draw-engine]$ ./build/wayland-app
wayland_ctx_create_window, begin
wayland_ctx_create_window: 356
[1401200.181] {Default Queue}  -> wl_display#1.get_registry(new id wl_registry#2)
[1401200.190] {Default Queue}  -> wl_display#1.sync(new id wl_callback#3)
[1401200.385] {Display Queue} wl_display#1.delete_id(3)
[1401200.407] {Default Queue} wl_registry#2.global(1, "wl_shm", 2)
[1401200.413] {Default Queue}  -> wl_registry#2.bind(1, "wl_shm", 1, new id [unknown]#4)
[1401200.417] {Default Queue} wl_registry#2.global(2, "zwp_linux_dmabuf_v1", 4)
[1401200.421] {Default Queue} wl_registry#2.global(3, "wp_linux_drm_syncobj_manager_v1", 1)
[1401200.428] {Default Queue} wl_registry#2.global(4, "wl_compositor", 6)
[1401200.431] {Default Queue}  -> wl_registry#2.bind(4, "wl_compositor", 1, new id [unknown]#5)
[1401200.434] {Default Queue} wl_registry#2.global(5, "wl_subcompositor", 1)
[1401200.439] {Default Queue} wl_registry#2.global(6, "wl_data_device_manager", 3)
[1401200.441] {Default Queue} wl_registry#2.global(7, "zwlr_gamma_control_manager_v1", 1)
[1401200.447] {Default Queue} wl_registry#2.global(8, "zxdg_output_manager_v1", 3)
[1401200.449] {Default Queue} wl_registry#2.global(9, "ext_idle_notifier_v1", 2)
[1401200.454] {Default Queue} wl_registry#2.global(10, "zwp_idle_inhibit_manager_v1", 1)
[1401200.458] {Default Queue} wl_registry#2.global(11, "zwlr_layer_shell_v1", 4)
[1401200.462] {Default Queue} wl_registry#2.global(12, "xdg_wm_base", 5)
[1401200.464] {Default Queue}  -> wl_registry#2.bind(12, "xdg_wm_base", 1, new id [unknown]#6)
[1401200.469] {Default Queue} wl_registry#2.global(13, "zwp_tablet_manager_v2", 1)
[1401200.472] {Default Queue} wl_registry#2.global(14, "org_kde_kwin_server_decoration_manager", 1)
[1401200.477] {Default Queue} wl_registry#2.global(15, "zxdg_decoration_manager_v1", 1)
[1401200.479] {Default Queue} wl_registry#2.global(16, "zwp_relative_pointer_manager_v1", 1)
[1401200.487] {Default Queue} wl_registry#2.global(17, "zwp_pointer_constraints_v1", 1)
[1401200.492] {Default Queue} wl_registry#2.global(18, "wp_presentation", 2)
[1401200.495] {Default Queue} wl_registry#2.global(19, "wp_alpha_modifier_v1", 1)
[1401200.499] {Default Queue} wl_registry#2.global(20, "zwlr_output_manager_v1", 4)
[1401200.502] {Default Queue} wl_registry#2.global(21, "zwlr_output_power_manager_v1", 1)
[1401200.506] {Default Queue} wl_registry#2.global(22, "zwp_input_method_manager_v2", 1)
[1401200.509] {Default Queue} wl_registry#2.global(23, "zwp_text_input_manager_v3", 1)
[1401200.514] {Default Queue} wl_registry#2.global(24, "ext_foreign_toplevel_list_v1", 1)
[1401200.517] {Default Queue} wl_registry#2.global(25, "zwlr_foreign_toplevel_manager_v1", 3)
[1401200.522] {Default Queue} wl_registry#2.global(26, "ext_session_lock_manager_v1", 1)
[1401200.524] {Default Queue} wl_registry#2.global(27, "wp_drm_lease_device_v1", 1)
[1401200.529] {Default Queue} wl_registry#2.global(28, "zwlr_export_dmabuf_manager_v1", 1)
[1401200.531] {Default Queue} wl_registry#2.global(29, "zwlr_screencopy_manager_v1", 3)
[1401200.536] {Default Queue} wl_registry#2.global(30, "ext_image_copy_capture_manager_v1", 1)
[1401200.538] {Default Queue} wl_registry#2.global(31, "ext_output_image_capture_source_manager_v1", 1)
[1401200.543] {Default Queue} wl_registry#2.global(32, "zwlr_data_control_manager_v1", 2)
[1401200.546] {Default Queue} wl_registry#2.global(33, "ext_data_control_manager_v1", 1)
[1401200.551] {Default Queue} wl_registry#2.global(34, "wp_security_context_manager_v1", 1)
[1401200.554] {Default Queue} wl_registry#2.global(35, "wp_viewporter", 1)
[1401200.559] {Default Queue} wl_registry#2.global(36, "wp_single_pixel_buffer_manager_v1", 1)
[1401200.569] {Default Queue} wl_registry#2.global(37, "wp_content_type_manager_v1", 1)
[1401200.571] {Default Queue} wl_registry#2.global(38, "wp_fractional_scale_manager_v1", 1)
[1401200.575] {Default Queue} wl_registry#2.global(39, "wp_tearing_control_manager_v1", 1)
[1401200.579] {Default Queue} wl_registry#2.global(40, "zxdg_exporter_v1", 1)
[1401200.582] {Default Queue} wl_registry#2.global(41, "zxdg_importer_v1", 1)
[1401200.585] {Default Queue} wl_registry#2.global(42, "zxdg_exporter_v2", 1)
[1401200.589] {Default Queue} wl_registry#2.global(43, "zxdg_importer_v2", 1)
[1401200.592] {Default Queue} wl_registry#2.global(44, "xdg_activation_v1", 1)
[1401200.597] {Default Queue} wl_registry#2.global(45, "wp_cursor_shape_manager_v1", 1)
[1401200.600] {Default Queue} wl_registry#2.global(46, "zwp_virtual_keyboard_manager_v1", 1)
[1401200.605] {Default Queue} wl_registry#2.global(47, "zwlr_virtual_pointer_manager_v1", 2)
[1401200.607] {Default Queue} wl_registry#2.global(48, "zwp_keyboard_shortcuts_inhibit_manager_v1", 1)
[1401200.611] {Default Queue} wl_registry#2.global(49, "zwp_pointer_gestures_v1", 3)
[1401200.613] {Default Queue} wl_registry#2.global(50, "ext_transient_seat_manager_v1", 1)
[1401200.616] {Default Queue} wl_registry#2.global(51, "wl_seat", 9)
[1401200.618] {Default Queue} wl_registry#2.global(53, "zwp_primary_selection_device_manager_v1", 1)
[1401200.622] {Default Queue} wl_registry#2.global(54, "wl_output", 4)
[1401200.624] {Default Queue} wl_callback#3.done(1525)
wayland_ctx_create_window: 384
wayland_ctx_create_surface, begin
[1401200.635] {Default Queue}  -> wl_compositor#5.create_surface(new id wl_surface#3)
[1401200.640] {Default Queue}  -> xdg_wm_base#6.get_xdg_surface(new id xdg_surface#7, wl_surface#3)
[1401200.644] {Default Queue}  -> xdg_surface#7.get_toplevel(new id xdg_toplevel#8)
[1401200.649] {Default Queue}  -> xdg_toplevel#8.set_title("helloworld")
[1401200.652] {Default Queue}  -> wl_surface#3.commit()
[1401200.656] {Default Queue}  -> wl_surface#3.frame(new id wl_callback#9)
[1401200.859] {Default Queue} discarded wl_shm#4.format(0)
[1401200.870] {Default Queue} discarded wl_shm#4.format(1)
[1401200.873] {Default Queue} discarded wl_shm#4.format(875709016)
[1401200.875] {Default Queue} discarded wl_shm#4.format(875708993)
[1401200.877] {Default Queue} discarded wl_shm#4.format(875710274)
[1401200.880] {Default Queue} discarded wl_shm#4.format(842094674)
[1401200.882] {Default Queue} discarded wl_shm#4.format(842088786)
[1401200.883] {Default Queue} discarded wl_shm#4.format(892426322)
[1401200.885] {Default Queue} discarded wl_shm#4.format(892420434)
[1401200.887] {Default Queue} discarded wl_shm#4.format(909199186)
[1401200.889] {Default Queue} discarded wl_shm#4.format(808665688)
[1401200.891] {Default Queue} discarded wl_shm#4.format(808665665)
[1401200.893] {Default Queue} discarded wl_shm#4.format(1211384408)
[1401200.895] {Default Queue} discarded wl_shm#4.format(1211384385)
[1401200.897] {Default Queue} discarded wl_shm#4.format(942948952)
[1401200.899] {Default Queue} discarded wl_shm#4.format(942948929)
[1401200.901] {Default Queue} xdg_wm_base#6.ping(1526)
[1401200.904] {Default Queue}  -> xdg_wm_base#6.pong(1526)
xdg_wm_base_handle_ping: end
[1401200.909] {Default Queue} xdg_toplevel#8.configure(0, 0, array[0])
xdg_toplevel_handle_configure: width: 0, height: 0
[1401200.918] {Default Queue} xdg_surface#7.configure(1527)
[1401200.920] {Default Queue}  -> xdg_surface#7.ack_configure(1527)
recv the first configure event
wayland_ctx_create_surface, end
wayland_ctx_create_window: 393
wayland_ctx_create_shm_pool, begin
[1401201.001] {Default Queue}  -> wl_shm#4.create_pool(new id wl_shm_pool#10, fd 5, 3840000)
wayland_ctx_create_shm_pool, end
wayland_ctx_create_window: 403
wayland_ctx_create_buffer, begin
[1401201.010] {Default Queue}  -> wl_shm_pool#10.create_buffer(new id wl_buffer#11, 0, 800, 600, 3200, 1)
wayland_ctx_create_buffer, end
wayland_ctx_create_window, end
wayland_ctx_attach_buffer, begin
[1401203.557] {Default Queue}  -> wl_surface#3.attach(wl_buffer#11, 0, 0)
[1401203.569] {Default Queue}  -> wl_surface#3.damage(0, 0, -1, -1)
wayland_ctx_attach_buffer, end
wayland_ctx_commit_buffer, begin
wayland_ctx_attach_buffer, begin
[1401203.577] {Default Queue}  -> wl_surface#3.attach(wl_buffer#11, 0, 0)
[1401203.579] {Default Queue}  -> wl_surface#3.damage(0, 0, -1, -1)
wayland_ctx_attach_buffer, end
[1401203.585] {Default Queue}  -> wl_surface#3.commit()
wayland_ctx_commit_buffer, end
[1401206.963] {Display Queue} wl_display#1.delete_id(9)
[1401206.987] {Default Queue} wl_callback#9.done(1429144)
wl_surface_frame_done: begin
[1401207.008] {Default Queue}  -> wl_surface#3.frame(new id wl_callback#9)
wl_surface_frame_done: time: 1429144
[1401207.021] {Default Queue}  -> wl_surface#3.attach(wl_buffer#11, 0, 0)
[1401207.035] {Default Queue}  -> wl_surface#3.damage_buffer(0, 0, 2147483647, 2147483647)
wl_surface_frame_done: end
[1401207.048] {Default Queue} wl_buffer#11.release()
wl_buffer_release: begin
wl_buffer_release: end
[1401207.068] {Default Queue} xdg_toplevel#8.configure(1276, 1378, array[8])
xdg_toplevel_handle_configure: width: 1276, height: 1378
[1401207.090] {Default Queue} xdg_surface#7.configure(1528)
[1401207.099] {Default Queue}  -> xdg_surface#7.ack_configure(1528)
[1401207.108] {Default Queue}  -> wl_surface#3.commit()
xdg_surface_handle_configure: end
[1401207.884] {Display Queue} wl_display#1.error(wl_display#1, 1, "invalid method 9 (since 1 < 4), object wl_surface#3")
wl_display#1: error 1: invalid method 9 (since 1 < 4), object wl_surface#3
^C